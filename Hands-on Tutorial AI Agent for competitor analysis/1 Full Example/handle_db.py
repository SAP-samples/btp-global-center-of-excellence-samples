from datetime import datetime
import hdbcli.dbapi
import hana_ml.dataframe as df
import os
from dotenv import load_dotenv

load_dotenv()

db_address = os.getenv("DB_ADDRESS")
db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")


def get_conn():
    conn =  df.ConnectionContext(address=db_address, port=443, user=db_user, password=db_password).connection
    return conn


def init_db(conn):
    "Initialize database"
    sql_create_pages = """CREATE TABLE PAGES (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        url NVARCHAR(300) UNIQUE NOT NULL,
        parent_url NVARCHAR(300),
        discovered_at SECONDDATE NOT NULL,
        last_updated_at SECONDDATE,
        static INTEGER,
        content_hash NVARCHAR(64),
        content NVARCHAR(5000),
        previous_content NVARCHAR(5000)
    );"""

    sql_create_summaries = """CREATE TABLE SUMMARIES (
        summary_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        summary_content NCLOB NOT NULL,
        created_at SECONDDATE DEFAULT CURRENT_UTCTIMESTAMP
    );"""

    sql_table_exists = """
        SELECT 1 
        FROM "SYS"."TABLES" 
        WHERE TABLE_NAME = ?
    """
    sql_add_embeddings = """ALTER TABLE PAGES ADD (EMBEDDING REAL_VECTOR GENERATED ALWAYS AS VECTOR_EMBEDDING(DOCUMENT, 'CONTENT', 'SAP_NEB.20240715'));"""

    conn =  df.ConnectionContext(address=db_address, port=443, user=db_user, password=db_password).connection
    cursor = conn.cursor()
    try:
        #Create pages table
        cursor.execute(sql_table_exists, ("PAGES",))
        if not cursor.fetchone():
            cursor.execute(sql_create_pages)
            # Add vector embeddings
            cursor.execute(sql_add_embeddings)
            print("Pages table created successfully!")
        cursor.execute(sql_table_exists, ("SUMMARIES",))
        #Create summaries table
        if not cursor.fetchone():
            cursor.execute(sql_create_summaries)
            print("Summaries table created successfully!")


    except hdbcli.dbapi.Error as e:
        print(f"Error while creating database tables: {e}.")


    return conn

def add_summary(conn, content):
    "Adds a new summary"
    cursor = conn.cursor()
    try:
        cursor.execute('''
        INSERT INTO summaries (summary_content)
        VALUES (?)
        ''', (content,))
        conn.commit()
    except Exception as e:
        print(e)

def retrieve_recent_summary(conn):
    cursor = conn.cursor()
    try:
        cursor.execute('''SELECT SUMMARY_CONTENT FROM summaries ORDER BY created_at DESC''')
        return cursor.fetchone()[0]
    except Exception as e:
        print(e)


def retrieve_page(conn, url, columns: list[str]) -> tuple | None:
    """
    Retrieves the specified columns for a given URL from the 'pages' table.
    Returns a tuple containing the values of the requested columns, or None if no matching row is found.
    """
    if not columns:
        raise ValueError("Columns can not be empty.")
    cursor = conn.cursor()
    get_columns_query = """
            SELECT COLUMN_NAME 
            FROM "SYS"."TABLE_COLUMNS" 
            WHERE TABLE_NAME = ? 
    """
    cursor.execute(get_columns_query, ("PAGES",))
    allowed_columns = {row[0].upper() for row in cursor.fetchall()}
    for col in columns:
        if col.upper() not in allowed_columns:
            raise ValueError(f"Column '{col}' not found in 'PAGES' table.")
    column_str = ", ".join(columns)
    sql_query = f"SELECT {column_str} FROM pages WHERE url = ?"
    cursor.execute(sql_query, (url,))
    return cursor.fetchone()

def add_new_page(conn, url, parent_url, static, content_hash, content):
    "Adds a new page"
    cursor = conn.cursor()
    try:
        cursor.execute('''
        INSERT INTO pages (url, parent_url, discovered_at, last_updated_at, static, content_hash, content, previous_content)
        VALUES (?, ?, ?, ?, ?, ?, ?, NULL)
        ''', (url, parent_url, datetime.now(), datetime.now(), static, content_hash, content))
        conn.commit()
    except Exception as e:
        print(e)

def update_page(conn, page_id, content_hash, content):
    "Update a page"
    cursor = conn.cursor()
    cursor.execute("SELECT content FROM pages WHERE id = ?", (page_id,))
    result = cursor.fetchone()

    if result is None:
        print(f"Page update failed. Couldn't find url with page_id {page_id}")
        return

    previous_content = result[0]

    cursor.execute('''
           UPDATE pages
           SET last_updated_at = ?, content_hash = ?, content = ?, previous_content = ?
           WHERE id = ?
           ''', (datetime.now(), content_hash, content, page_id, previous_content))
    print("Updated page.")


def get_pages_by_date(conn, target_date_str):
    "Retrieves pages by date"
    cursor = conn.cursor()
    query = """
    SELECT url, parent_url, discovered_at, last_updated_at, static, content_hash, content, previous_content 
    FROM pages
    WHERE TO_DATE(last_updated_at) = ?
    ORDER BY last_updated_at DESC;
    """
    cursor.execute(query, (target_date_str,))
    return cursor.fetchall()